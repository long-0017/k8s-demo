---
# Zookeeper Service
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: kafka
spec:
  selector:
    app: zookeeper
  ports:
    - port: 2888
      name: server
    - port: 3888
      name: leader-election
    - port: 2181
      name: client
  clusterIP: None
---
# Kafka Zookeeper 部署
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: kafka
spec:
  serviceName: zookeeper
  replicas: 3
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: registry.cn-hangzhou.aliyuncs.com/aliyun_0612/zookeeper:3.4.10
          resources:
            requests:
              cpu: "100m"
              memory: "200Mi"
          ports:
            - containerPort: 2181
              name: client
            - containerPort: 2888
              name: server
            - containerPort: 3888
              name: leader-election
          command:
            - sh
            - -c
            - "start-zookeeper \
                    --servers=3 \
                    --data_dir=/var/lib/zookeeper/data \
                    --data_log_dir=/var/lib/zookeeper/data/log \
                    --conf_dir=/opt/zookeeper/conf \
                    --client_port=2181 \
                    --election_port=3888 \
                    --server_port=2888 \
                    --tick_time=2000 \
                    --init_limit=10 \
                    --sync_limit=5 \
                    --heap=512M \
                    --max_client_cnxns=60 \
                    --snap_retain_count=3 \
                    --purge_interval=12 \
                    --max_session_timeout=40000 \
                    --min_session_timeout=4000 \
                    --log_level=INFO"
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - "zookeeper-ready 2181"
            initialDelaySeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - "zookeeper-ready 2181"
            initialDelaySeconds: 10
            timeoutSeconds: 5
          volumeMounts:
            - name: zookeeper-data
              mountPath: /var/lib/zookeeper
      securityContext:
        runAsUser: 0
        fsGroup: 0
  volumeClaimTemplates:
    - metadata:
        name: zookeeper-data
      spec:
        accessModes: [ "ReadWriteMany" ]
        storageClassName: nfs-sc
        resources:
          requests:
            storage: 1Gi
---
# Kafka Service (内部访问)
apiVersion: v1
kind: Service
metadata:
  name: kafka-svc
  namespace: kafka
  labels:
    app: kafka
spec:
  selector:
    app: kafka
  ports:
    - port: 9092
      name: server
  clusterIP: None
---
# Kafka 外部访问 Service (NodePort)
apiVersion: v1
kind: Service
metadata:
  name: kafka-external
  namespace: kafka
spec:
  selector:
    app: kafka
  type: NodePort
  ports:
    - name: kafka-external
      port: 9092
      targetPort: 9092
      nodePort: 30092
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
  name: kafka-0-external
  namespace: kafka
spec:
  ports:
    - name: server
      nodePort: 31090
      port: 9092
      protocol: TCP
      targetPort: 9092
  selector:
    statefulset.kubernetes.io/pod-name: kafka-0
  sessionAffinity: None
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
  name: kafka-1-external
  namespace: kafka
spec:
  ports:
    - name: server
      nodePort: 31091
      port: 9092
      protocol: TCP
      targetPort: 9092
  selector:
    statefulset.kubernetes.io/pod-name: kafka-1
  sessionAffinity: None
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
  name: kafka-2-external
  namespace: kafka
spec:
  ports:
    - name: server
      nodePort: 31092
      port: 9092
      protocol: TCP
      targetPort: 9092
  selector:
    statefulset.kubernetes.io/pod-name: kafka-2
  sessionAffinity: None
  type: NodePort
---
# Kafka 部署
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: kafka
spec:
  serviceName: kafka-svc
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: registry.cn-hangzhou.aliyuncs.com/aliyun_0612/kafka:3.7.1
          ports:
            - containerPort: 9092
              name: server
          resources:
            requests:
              memory: "500Mi"
              cpu: "200m"
          command:
            - sh
            - -c
            - "exec /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties --override broker.id=${HOSTNAME##*-} \
                    --override listeners=PLAINTEXT://:9092 \
                    --override advertised.listeners=PLAINTEXT://192.168.146.120:$((31090 + ${HOSTNAME##*-})) \ 
                    --override zookeeper.connect=zookeeper.kafka.svc.cluster.local:2181 \
                    --override log.dir=/var/lib/kafka \
                    --override auto.create.topics.enable=true \
                    --override auto.leader.rebalance.enable=true \
                    --override background.threads=10 \
                    --override compression.type=producer \
                    --override delete.topic.enable=false \
                    --override leader.imbalance.check.interval.seconds=300 \
                    --override leader.imbalance.per.broker.percentage=10 \
                    --override log.flush.interval.messages=9223372036854775807 \
                    --override log.flush.offset.checkpoint.interval.ms=60000 \
                    --override log.flush.scheduler.interval.ms=9223372036854775807 \
                    --override log.retention.bytes=-1 \
                    --override log.retention.hours=168 \
                    --override log.roll.hours=168 \
                    --override log.roll.jitter.hours=0 \
                    --override log.segment.bytes=1073741824 \
                    --override log.segment.delete.delay.ms=60000 \
                    --override message.max.bytes=1000012 \
                    --override min.insync.replicas=1 \
                    --override num.io.threads=8 \
                    --override num.network.threads=3 \
                    --override num.recovery.threads.per.data.dir=1 \
                    --override num.replica.fetchers=1 \
                    --override offset.metadata.max.bytes=4096 \
                    --override offsets.commit.required.acks=-1 \
                    --override offsets.commit.timeout.ms=5000 \
                    --override offsets.load.buffer.size=5242880 \
                    --override offsets.retention.check.interval.ms=600000 \
                    --override offsets.retention.minutes=1440 \
                    --override offsets.topic.compression.codec=0 \
                    --override offsets.topic.num.partitions=50 \
                    --override offsets.topic.replication.factor=3 \
                    --override offsets.topic.segment.bytes=104857600 \
                    --override queued.max.requests=500 \
                    --override quota.consumer.default=9223372036854775807 \
                    --override quota.producer.default=9223372036854775807 \
                    --override replica.fetch.min.bytes=1 \
                    --override replica.fetch.wait.max.ms=500 \
                    --override replica.high.watermark.checkpoint.interval.ms=5000 \
                    --override replica.lag.time.max.ms=10000 \
                    --override replica.socket.receive.buffer.bytes=65536 \
                    --override replica.socket.timeout.ms=30000 \
                    --override request.timeout.ms=30000 \
                    --override socket.receive.buffer.bytes=102400 \
                    --override socket.request.max.bytes=104857600 \
                    --override socket.send.buffer.bytes=102400 \
                    --override unclean.leader.election.enable=true \
                    --override zookeeper.session.timeout.ms=6000 \
                    --override zookeeper.set.acl=false \
                    --override broker.id.generation.enable=true \
                    --override connections.max.idle.ms=600000 \
                    --override controlled.shutdown.enable=true \
                    --override controlled.shutdown.max.retries=3 \
                    --override controlled.shutdown.retry.backoff.ms=5000 \
                    --override controller.socket.timeout.ms=30000 \
                    --override default.replication.factor=1 \
                    --override fetch.purgatory.purge.interval.requests=1000 \
                    --override group.max.session.timeout.ms=300000 \
                    --override group.min.session.timeout.ms=6000 \
                    --override inter.broker.protocol.version=2.2.0 \
                    --override log.cleaner.backoff.ms=15000 \
                    --override log.cleaner.dedupe.buffer.size=134217728 \
                    --override log.cleaner.delete.retention.ms=86400000 \
                    --override log.cleaner.enable=true \
                    --override log.cleaner.io.buffer.load.factor=0.9 \
                    --override log.cleaner.io.buffer.size=524288 \
                    --override log.cleaner.io.max.bytes.per.second=1.7976931348623157E308 \
                    --override log.cleaner.min.cleanable.ratio=0.5 \
                    --override log.cleaner.min.compaction.lag.ms=0 \
                    --override log.cleaner.threads=1 \
                    --override log.cleanup.policy=delete \
                    --override log.index.interval.bytes=4096 \
                    --override log.index.size.max.bytes=10485760 \
                    --override log.message.timestamp.difference.max.ms=9223372036854775807 \
                    --override log.message.timestamp.type=CreateTime \
                    --override log.preallocate=false \
                    --override log.retention.check.interval.ms=300000 \
                    --override max.connections.per.ip=2147483647 \
                    --override num.partitions=3 \
                    --override producer.purgatory.purge.interval.requests=1000 \
                    --override replica.fetch.backoff.ms=1000 \
                    --override replica.fetch.max.bytes=1048576 \
                    --override replica.fetch.response.max.bytes=10485760 \
                    --override reserved.broker.max.id=1000 "
          env:
            - name: KAFKA_HEAP_OPTS
              value : "-Xmx512M -Xms512M"
            - name: KAFKA_OPTS
              value: "-Dlogging.level=INFO"
          volumeMounts:
            - name: kafka-data
              mountPath: /var/lib/kafka
          readinessProbe:
            tcpSocket:
              port: 9092
            timeoutSeconds: 1
            initialDelaySeconds: 5
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
        annotations:
          volume.beta.kubernetes.io/storage-class: "nfs-sc"
      spec:
        accessModes: [ "ReadWriteMany" ]
        resources:
          requests:
            storage: 1Gi
---

